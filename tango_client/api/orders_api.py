# coding: utf-8

"""
    Tango Card RaaS API

    <5. Ordersp>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tango_client.api_client import ApiClient


class OrdersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_order(self, **kwargs):  # noqa: E501
        """Create an Order under a specific Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_order(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOrderCriteria create_order_criteria: <strong>accountIdentifier</strong> - specify the account this order will be deducted from<br/><br/><strong>amount</strong> - specify the face value of of the reward. Always required, including for fixed value items.<br/><br/><strong>campaign</strong> - optional campaign that may be used to administratively categorize a specific order.<br/><br/><strong>customerIdentifier</strong> - specify the customer associated with the order. Must be the customer the accountIdentifier is associated with.<br/><br/><strong>emailSubject</strong> - Optional. If not specified, a default email subject will be used for the specified reward.<br/><br/><strong>externalRefID</strong> - Optional. Idempotenent field that can be used for client-side order cross reference and prevent accidental order duplication. Will be returned in order response, order details, and order history.<br/><br/><strong>message</strong> - optional gift message<br/><br/><strong>recipient - email</strong> - required if sendEmail is true<br/><br/><strong>recipient - firstName</strong> - required if sendEmail is true (100 character max)<br/><br/><strong>recipient - lastName</strong> - always optional (100 character max)<br/><br/><strong>sendEmail</strong> - should Tango Card send the email to the recipient?<br/><br/><strong>sender - firstName</strong> - always optional (100 character max)<br/><br/><strong>sender - lastName</strong> - always optional (100 character max)<br/><br/><strong>sender - email</strong> - always optional<br/><br/><strong>utid</strong> - the unique identifier for the reward you are sending as provided in the Get Catalog call<br/><br/><strong>etid</strong> - Optional. The unique identifier for the email template you would like to use. Only applicable if sendEmail is true.<br/><br/><strong>notes</strong> - Optional order notes (up to 150 characters)
        :return: OrderViewSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_order_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_order_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_order_with_http_info(self, **kwargs):  # noqa: E501
        """Create an Order under a specific Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_order_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOrderCriteria create_order_criteria: <strong>accountIdentifier</strong> - specify the account this order will be deducted from<br/><br/><strong>amount</strong> - specify the face value of of the reward. Always required, including for fixed value items.<br/><br/><strong>campaign</strong> - optional campaign that may be used to administratively categorize a specific order.<br/><br/><strong>customerIdentifier</strong> - specify the customer associated with the order. Must be the customer the accountIdentifier is associated with.<br/><br/><strong>emailSubject</strong> - Optional. If not specified, a default email subject will be used for the specified reward.<br/><br/><strong>externalRefID</strong> - Optional. Idempotenent field that can be used for client-side order cross reference and prevent accidental order duplication. Will be returned in order response, order details, and order history.<br/><br/><strong>message</strong> - optional gift message<br/><br/><strong>recipient - email</strong> - required if sendEmail is true<br/><br/><strong>recipient - firstName</strong> - required if sendEmail is true (100 character max)<br/><br/><strong>recipient - lastName</strong> - always optional (100 character max)<br/><br/><strong>sendEmail</strong> - should Tango Card send the email to the recipient?<br/><br/><strong>sender - firstName</strong> - always optional (100 character max)<br/><br/><strong>sender - lastName</strong> - always optional (100 character max)<br/><br/><strong>sender - email</strong> - always optional<br/><br/><strong>utid</strong> - the unique identifier for the reward you are sending as provided in the Get Catalog call<br/><br/><strong>etid</strong> - Optional. The unique identifier for the email template you would like to use. Only applicable if sendEmail is true.<br/><br/><strong>notes</strong> - Optional order notes (up to 150 characters)
        :return: OrderViewSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_order_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_order" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_order_criteria' in params:
            body_params = params['create_order_criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/orders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderViewSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_order(self, reference_order_id, **kwargs):  # noqa: E501
        """Get details for a specific Order.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order(reference_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_order_id: Reference order ID is returned in the order response payload (required)
        :return: OrderViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_order_with_http_info(reference_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_order_with_http_info(reference_order_id, **kwargs)  # noqa: E501
            return data

    def get_order_with_http_info(self, reference_order_id, **kwargs):  # noqa: E501
        """Get details for a specific Order.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_with_http_info(reference_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_order_id: Reference order ID is returned in the order response payload (required)
        :return: OrderViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_order_id' is set
        if self.api_client.client_side_validation and ('reference_order_id' not in params or
                                                       params['reference_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reference_order_id` when calling `get_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_order_id' in params:
            path_params['referenceOrderID'] = params['reference_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/orders/{referenceOrderID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderViewVerbose',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_order_resends(self, reference_order_id, **kwargs):  # noqa: E501
        """Resend a specific Order.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_resends(reference_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_order_id: Reference order ID is returned in the order response payload (required)
        :param OrderResendRequestCriteria order_resend_criteria: <strong>newEmail</strong> - A new email to resend this order to.
        :return: ResendView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_order_resends_with_http_info(reference_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_order_resends_with_http_info(reference_order_id, **kwargs)  # noqa: E501
            return data

    def get_order_resends_with_http_info(self, reference_order_id, **kwargs):  # noqa: E501
        """Resend a specific Order.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_resends_with_http_info(reference_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_order_id: Reference order ID is returned in the order response payload (required)
        :param OrderResendRequestCriteria order_resend_criteria: <strong>newEmail</strong> - A new email to resend this order to.
        :return: ResendView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_order_id', 'order_resend_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order_resends" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_order_id' is set
        if self.api_client.client_side_validation and ('reference_order_id' not in params or
                                                       params['reference_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reference_order_id` when calling `get_order_resends`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reference_order_id' in params:
            path_params['referenceOrderID'] = params['reference_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'order_resend_criteria' in params:
            body_params = params['order_resend_criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/orders/{referenceOrderID}/resends', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResendView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_orders(self, **kwargs):  # noqa: E501
        """Get a list of Orders placed under this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_orders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_identifier: specify the account to be queried.
        :param str customer_identifier: specify the customer to be queried
        :param str external_ref_id: specify the external reference ID to be queried
        :param str start_date: specify the starting date or date time to be queried according to RFC 3339, i.e. \"2016-01-01\" or \"2016-01-01T00:00:00Z\". See https://www.ietf.org/rfc/rfc3339.txt 
        :param str end_date: specify the ending date or date time to be queried according to RFC 3339, i.e. \"2016-01-01\" or \"2016-01-01T00:00:00Z\". See https://www.ietf.org/rfc/rfc3339.txt 
        :param int elements_per_block: specify the number of elements in a block.
        :param int page: specify the page number to return.
        :return: OrderListView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_orders_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of Orders placed under this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_orders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_identifier: specify the account to be queried.
        :param str customer_identifier: specify the customer to be queried
        :param str external_ref_id: specify the external reference ID to be queried
        :param str start_date: specify the starting date or date time to be queried according to RFC 3339, i.e. \"2016-01-01\" or \"2016-01-01T00:00:00Z\". See https://www.ietf.org/rfc/rfc3339.txt 
        :param str end_date: specify the ending date or date time to be queried according to RFC 3339, i.e. \"2016-01-01\" or \"2016-01-01T00:00:00Z\". See https://www.ietf.org/rfc/rfc3339.txt 
        :param int elements_per_block: specify the number of elements in a block.
        :param int page: specify the page number to return.
        :return: OrderListView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_identifier', 'customer_identifier', 'external_ref_id', 'start_date', 'end_date', 'elements_per_block', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_orders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_identifier' in params:
            query_params.append(('accountIdentifier', params['account_identifier']))  # noqa: E501
        if 'customer_identifier' in params:
            query_params.append(('customerIdentifier', params['customer_identifier']))  # noqa: E501
        if 'external_ref_id' in params:
            query_params.append(('externalRefID', params['external_ref_id']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'elements_per_block' in params:
            query_params.append(('elementsPerBlock', params['elements_per_block']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderListView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Tango Card RaaS API

    <5. Ordersp>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tango_client.api_client import ApiClient


class CustomersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_customer(self, **kwargs):  # noqa: E501
        """Create a new Customer on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerCriteria form: <strong>displayName</strong> - a friendly name for this customer <br /><br /><strong>customerIdentifier</strong> - an official identifier for this customer. This identifier needs to be lowercase if alphabetic characters are used.
        :return: CustomerViewNew
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_customer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_customer_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_customer_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new Customer on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerCriteria form: <strong>displayName</strong> - a friendly name for this customer <br /><br /><strong>customerIdentifier</strong> - an official identifier for this customer. This identifier needs to be lowercase if alphabetic characters are used.
        :return: CustomerViewNew
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['form']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_customer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'form' in params:
            body_params = params['form']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerViewNew',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_customer_account(self, customer_identifier, **kwargs):  # noqa: E501
        """Create an Account under a specific Customer on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer_account(customer_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_identifier: The customerIdentifier for the Customer under which you are creating a new account (required)
        :param CreateAccountCriteria account_criteria: <strong>contactEmail</strong> - An email address for a designated representative for this account.<br /><br /><strong>displayName</strong> - A friendly name for this account<br /><br /><strong>identifier</strong> - A unique identifier for this account. This identifier must be lowercase if alphabetic characters are used.
        :return: AccountView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_customer_account_with_http_info(customer_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.create_customer_account_with_http_info(customer_identifier, **kwargs)  # noqa: E501
            return data

    def create_customer_account_with_http_info(self, customer_identifier, **kwargs):  # noqa: E501
        """Create an Account under a specific Customer on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer_account_with_http_info(customer_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_identifier: The customerIdentifier for the Customer under which you are creating a new account (required)
        :param CreateAccountCriteria account_criteria: <strong>contactEmail</strong> - An email address for a designated representative for this account.<br /><br /><strong>displayName</strong> - A friendly name for this account<br /><br /><strong>identifier</strong> - A unique identifier for this account. This identifier must be lowercase if alphabetic characters are used.
        :return: AccountView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_identifier', 'account_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_customer_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_identifier' is set
        if self.api_client.client_side_validation and ('customer_identifier' not in params or
                                                       params['customer_identifier'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_identifier` when calling `create_customer_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_identifier' in params:
            path_params['customerIdentifier'] = params['customer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account_criteria' in params:
            body_params = params['account_criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customers/{customerIdentifier}/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer(self, customer_identifier, **kwargs):  # noqa: E501
        """Get details for a specific Customer on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer(customer_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_identifier: customerIdentifier (required)
        :return: CustomerViewSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer_with_http_info(customer_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_with_http_info(customer_identifier, **kwargs)  # noqa: E501
            return data

    def get_customer_with_http_info(self, customer_identifier, **kwargs):  # noqa: E501
        """Get details for a specific Customer on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_with_http_info(customer_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_identifier: customerIdentifier (required)
        :return: CustomerViewSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_identifier' is set
        if self.api_client.client_side_validation and ('customer_identifier' not in params or
                                                       params['customer_identifier'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_identifier` when calling `get_customer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_identifier' in params:
            path_params['customerIdentifier'] = params['customer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customers/{customerIdentifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerViewSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_customer_accounts1(self, customer_identifier, **kwargs):  # noqa: E501
        """Get a list of all Accounts created for a specific Customer on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_customer_accounts1(customer_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_identifier: customerIdentifier (required)
        :return: list[AccountViewSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_customer_accounts1_with_http_info(customer_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.list_customer_accounts1_with_http_info(customer_identifier, **kwargs)  # noqa: E501
            return data

    def list_customer_accounts1_with_http_info(self, customer_identifier, **kwargs):  # noqa: E501
        """Get a list of all Accounts created for a specific Customer on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_customer_accounts1_with_http_info(customer_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_identifier: customerIdentifier (required)
        :return: list[AccountViewSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_customer_accounts1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_identifier' is set
        if self.api_client.client_side_validation and ('customer_identifier' not in params or
                                                       params['customer_identifier'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_identifier` when calling `list_customer_accounts1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_identifier' in params:
            path_params['customerIdentifier'] = params['customer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customers/{customerIdentifier}/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountViewSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_customers(self, **kwargs):  # noqa: E501
        """Get a list of all Customers on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_customers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CustomerViewSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_customers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_customers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_customers_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all Customers on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_customers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CustomerViewSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_customers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomerViewSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Tango Card RaaS API

    <5. Ordersp>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tango_client.api_client import ApiClient


class FundApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_credit_card(self, **kwargs):  # noqa: E501
        """Register a new Credit Card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_card(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCreditCardCriteria credit_card_criteria: <strong>customerIdentifier</strong> - specify the customer associated with the credit card. Must be the customer the accountIdentifier is associated with.<br/><br/> <strong>accountIdentifier</strong> - specify the account this credit card is associated with<br/><br/> <strong>label</strong> - specify a label for the credit card<br/><br/> <strong>ipAddress</strong> - specify the The IP address of the person adding the credit card<br/><br/> <strong>creditCard - number</strong> - specify the account this order will be deducted from<br/><br/> <strong>creditCard - expiration</strong> - specify the card expiration date in YYYY-MM format<br/><br/> <strong>creditCard - verificationNumber</strong> - specify the 3 or 4-digit card security code on back of card (CVV2, CVC2, or CID)<br/><br/> <strong>billingAddress - firstName</strong> - specify the billing address first name<br/><br/> <strong>billingAddress - lastName</strong> - specify the billing address last name<br/><br/> <strong>billingAddress - addressLine1</strong> - specify the billing address line 1<br/><br/> <strong>billingAddress - addressLine2</strong> - Optional. Specify the billing address line 2<br/><br/> <strong>billingAddress - city</strong> - specify the billing address city<br/><br/> <strong>billingAddress - state</strong> - specify the billing address state<br/><br/> <strong>billingAddress - postalCode</strong> - specify the billing address postal code<br/><br/> <strong>billingAddress - country</strong> - specify the billing address 2-letter country code<br/><br/> <strong>billingAddress - emailAddress</strong> - specify the billing address email<br/><br/> <strong>contactInformation - fullName</strong> - Optional. Used for email receipts. Specify the contact full name.<br/><br/> <strong>contactInformation - emailAddress</strong> - Optional. Used for email receipts. Specify the contact email address.<br/><br/> 
        :return: CreditCardView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_credit_card_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_credit_card_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_credit_card_with_http_info(self, **kwargs):  # noqa: E501
        """Register a new Credit Card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_card_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCreditCardCriteria credit_card_criteria: <strong>customerIdentifier</strong> - specify the customer associated with the credit card. Must be the customer the accountIdentifier is associated with.<br/><br/> <strong>accountIdentifier</strong> - specify the account this credit card is associated with<br/><br/> <strong>label</strong> - specify a label for the credit card<br/><br/> <strong>ipAddress</strong> - specify the The IP address of the person adding the credit card<br/><br/> <strong>creditCard - number</strong> - specify the account this order will be deducted from<br/><br/> <strong>creditCard - expiration</strong> - specify the card expiration date in YYYY-MM format<br/><br/> <strong>creditCard - verificationNumber</strong> - specify the 3 or 4-digit card security code on back of card (CVV2, CVC2, or CID)<br/><br/> <strong>billingAddress - firstName</strong> - specify the billing address first name<br/><br/> <strong>billingAddress - lastName</strong> - specify the billing address last name<br/><br/> <strong>billingAddress - addressLine1</strong> - specify the billing address line 1<br/><br/> <strong>billingAddress - addressLine2</strong> - Optional. Specify the billing address line 2<br/><br/> <strong>billingAddress - city</strong> - specify the billing address city<br/><br/> <strong>billingAddress - state</strong> - specify the billing address state<br/><br/> <strong>billingAddress - postalCode</strong> - specify the billing address postal code<br/><br/> <strong>billingAddress - country</strong> - specify the billing address 2-letter country code<br/><br/> <strong>billingAddress - emailAddress</strong> - specify the billing address email<br/><br/> <strong>contactInformation - fullName</strong> - Optional. Used for email receipts. Specify the contact full name.<br/><br/> <strong>contactInformation - emailAddress</strong> - Optional. Used for email receipts. Specify the contact email address.<br/><br/> 
        :return: CreditCardView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credit_card_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credit_card" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credit_card_criteria' in params:
            body_params = params['credit_card_criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/creditCards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreditCardView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_credit_card_deposit(self, **kwargs):  # noqa: E501
        """Fund an Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_card_deposit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCreditCardDepositCriteria criteria: <strong>customerIdentifier</strong> - specify the customer associated with the credit card. Must be the customer the accountIdentifier is associated with.<br/><br/> <strong>accountIdentifier</strong> - specify the account this credit card is associated with<br/><br/> <strong>creditCardToken</strong> - specify the credit card token to fund with<br/><br/> <strong>amount</strong> - specify the amount to fund in USD<br/><br/> 
        :return: CreditCardDepositView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_credit_card_deposit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_credit_card_deposit_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_credit_card_deposit_with_http_info(self, **kwargs):  # noqa: E501
        """Fund an Account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_card_deposit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCreditCardDepositCriteria criteria: <strong>customerIdentifier</strong> - specify the customer associated with the credit card. Must be the customer the accountIdentifier is associated with.<br/><br/> <strong>accountIdentifier</strong> - specify the account this credit card is associated with<br/><br/> <strong>creditCardToken</strong> - specify the credit card token to fund with<br/><br/> <strong>amount</strong> - specify the amount to fund in USD<br/><br/> 
        :return: CreditCardDepositView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credit_card_deposit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'criteria' in params:
            body_params = params['criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/creditCardDeposits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreditCardDepositView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_credit_card_unregister(self, **kwargs):  # noqa: E501
        """Unregister a Credit Card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_card_unregister(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCreditCardUnregisterCriteria criteria: <strong>customerIdentifier</strong> - specify the customer associated with the credit card. Must be the customer the accountIdentifier is associated with.<br/><br/> <strong>accountIdentifier</strong> - specify the account this credit card is associated with<br/><br/> <strong>creditCardToken</strong> - specify the credit card token to unregister<br/><br/> 
        :return: CreditCardUnregisterView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_credit_card_unregister_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_credit_card_unregister_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_credit_card_unregister_with_http_info(self, **kwargs):  # noqa: E501
        """Unregister a Credit Card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credit_card_unregister_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCreditCardUnregisterCriteria criteria: <strong>customerIdentifier</strong> - specify the customer associated with the credit card. Must be the customer the accountIdentifier is associated with.<br/><br/> <strong>accountIdentifier</strong> - specify the account this credit card is associated with<br/><br/> <strong>creditCardToken</strong> - specify the credit card token to unregister<br/><br/> 
        :return: CreditCardUnregisterView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credit_card_unregister" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'criteria' in params:
            body_params = params['criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/creditCardUnregisters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreditCardUnregisterView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credit_card(self, token, **kwargs):  # noqa: E501
        """Get details for a specific Credit Card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_card(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Credit card token (required)
        :return: CreditCardView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credit_card_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_credit_card_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def get_credit_card_with_http_info(self, token, **kwargs):  # noqa: E501
        """Get details for a specific Credit Card.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_card_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Credit card token (required)
        :return: CreditCardView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `get_credit_card`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/creditCards/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreditCardView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credit_card_deposit(self, deposit_id, **kwargs):  # noqa: E501
        """Get details for a specific Credit Card Deposit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_card_deposit(deposit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deposit_id: Credit card deposit identifier returned in Deposit response payload (required)
        :return: CreditCardDepositView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credit_card_deposit_with_http_info(deposit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_credit_card_deposit_with_http_info(deposit_id, **kwargs)  # noqa: E501
            return data

    def get_credit_card_deposit_with_http_info(self, deposit_id, **kwargs):  # noqa: E501
        """Get details for a specific Credit Card Deposit.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credit_card_deposit_with_http_info(deposit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str deposit_id: Credit card deposit identifier returned in Deposit response payload (required)
        :return: CreditCardDepositView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deposit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_card_deposit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deposit_id' is set
        if self.api_client.client_side_validation and ('deposit_id' not in params or
                                                       params['deposit_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `deposit_id` when calling `get_credit_card_deposit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deposit_id' in params:
            path_params['depositId'] = params['deposit_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/creditCardDeposits/{depositId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreditCardDepositView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_credit_cards(self, **kwargs):  # noqa: E501
        """List all credit cards registered on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_credit_cards(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool show_inactive: Show inactive cards
        :return: list[CreditCardView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_credit_cards_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_credit_cards_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_credit_cards_with_http_info(self, **kwargs):  # noqa: E501
        """List all credit cards registered on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_credit_cards_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool show_inactive: Show inactive cards
        :return: list[CreditCardView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['show_inactive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_credit_cards" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'show_inactive' in params:
            query_params.append(('showInactive', params['show_inactive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/creditCards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CreditCardView]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

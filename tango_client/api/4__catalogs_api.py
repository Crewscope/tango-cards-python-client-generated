# coding: utf-8

"""
    Tango Card RaaS API

    <p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tango_client.api_client import ApiClient


class 4CatalogsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_catalog(self, **kwargs):  # noqa: E501
        """Get all items in the Platform's Catalog.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_catalog(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_key: brandKey
        :param str brand_name: brandName
        :param str utid: utid
        :param str reward_name: rewardName
        :param str status: status
        :param str currency_code: currencyCode
        :param str country: country
        :param bool verbose: Verbose payload
        :return: CatalogViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_catalog_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_catalog_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_catalog_with_http_info(self, **kwargs):  # noqa: E501
        """Get all items in the Platform's Catalog.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_catalog_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_key: brandKey
        :param str brand_name: brandName
        :param str utid: utid
        :param str reward_name: rewardName
        :param str status: status
        :param str currency_code: currencyCode
        :param str country: country
        :param bool verbose: Verbose payload
        :return: CatalogViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_key', 'brand_name', 'utid', 'reward_name', 'status', 'currency_code', 'country', 'verbose']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_catalog" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'brand_key' in params:
            query_params.append(('brandKey', params['brand_key']))  # noqa: E501
        if 'brand_name' in params:
            query_params.append(('brandName', params['brand_name']))  # noqa: E501
        if 'utid' in params:
            query_params.append(('utid', params['utid']))  # noqa: E501
        if 'reward_name' in params:
            query_params.append(('rewardName', params['reward_name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'currency_code' in params:
            query_params.append(('currencyCode', params['currency_code']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'verbose' in params:
            query_params.append(('verbose', params['verbose']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/catalogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CatalogViewVerbose',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

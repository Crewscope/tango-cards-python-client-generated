# coding: utf-8

"""
    Tango Card RaaS API

    <p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tango_client.api_client import ApiClient


class 6EmailTemplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_email_template(self, **kwargs):  # noqa: E501
        """Create a new email template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_email_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateEmailTemplateCriteria create_email_template_criteria: <strong>name</strong> - A unique name to give the template.<br/><br/><strong>fromName</strong> - The name that will appear in the From line of the email.<br/><br/><strong>subject</strong> - The Subject of the email.<br/><br/><strong>headerImage</strong> - A Base64 encoded string of an image that will show as the header of the email.<br/><br/><strong>headerImageAltText</strong> - The Alt Text for the Header Image in the email.<br/><br/><strong>accentColor</strong> - A Hex color value, six hexadecimal digits preceded by a pound sign, used as an accent in the email.<br/><br/><strong>messageBody</strong> - The message body for the email. This is often used to let the recipient know why they have received the reward.<br/><br/><strong>closing</strong> - After the reward credential, a space to close the message to the recipient<br/><br/><strong>customerServiceMessage</strong> - (Optional) If left null, Tango Card's Customer Support contact information will be included. Otherwise contact information for your customer support, if you are taking responsibility for providing first tier customer support of your recipients. <br/><br/><strong>accessControl</strong> - (Optional) Which Customers and/or Accounts should have access to this template.<br/><br/><strong>accessControl - type</strong> - The type of access being specified: PLATFORM, CUSTOMER or ACCOUNT.<br/><br/><strong>accessControl - identifier</strong> - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.<br/><br/><strong>defaults</strong> - If you want this template to be used at order time for the given Platform, Customer or Account when the Email Template Identifier (etid) is not provided with the order.<br/><br/><strong>defaults - type</strong> - The type of default being specified: PLATFORM, CUSTOMER or ACCOUNT.<br/><br/><strong>defaults - identifier</strong> - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.<br/><br/>
        :return: EmailTemplateViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_email_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_email_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_email_template_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new email template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_email_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateEmailTemplateCriteria create_email_template_criteria: <strong>name</strong> - A unique name to give the template.<br/><br/><strong>fromName</strong> - The name that will appear in the From line of the email.<br/><br/><strong>subject</strong> - The Subject of the email.<br/><br/><strong>headerImage</strong> - A Base64 encoded string of an image that will show as the header of the email.<br/><br/><strong>headerImageAltText</strong> - The Alt Text for the Header Image in the email.<br/><br/><strong>accentColor</strong> - A Hex color value, six hexadecimal digits preceded by a pound sign, used as an accent in the email.<br/><br/><strong>messageBody</strong> - The message body for the email. This is often used to let the recipient know why they have received the reward.<br/><br/><strong>closing</strong> - After the reward credential, a space to close the message to the recipient<br/><br/><strong>customerServiceMessage</strong> - (Optional) If left null, Tango Card's Customer Support contact information will be included. Otherwise contact information for your customer support, if you are taking responsibility for providing first tier customer support of your recipients. <br/><br/><strong>accessControl</strong> - (Optional) Which Customers and/or Accounts should have access to this template.<br/><br/><strong>accessControl - type</strong> - The type of access being specified: PLATFORM, CUSTOMER or ACCOUNT.<br/><br/><strong>accessControl - identifier</strong> - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.<br/><br/><strong>defaults</strong> - If you want this template to be used at order time for the given Platform, Customer or Account when the Email Template Identifier (etid) is not provided with the order.<br/><br/><strong>defaults - type</strong> - The type of default being specified: PLATFORM, CUSTOMER or ACCOUNT.<br/><br/><strong>defaults - identifier</strong> - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.<br/><br/>
        :return: EmailTemplateViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_email_template_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_email_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_email_template_criteria' in params:
            body_params = params['create_email_template_criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/emailTemplates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailTemplateViewVerbose',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_email_template(self, etid, **kwargs):  # noqa: E501
        """Delete a specific Email Template on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_email_template(etid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str etid: Email Template Identifier (ETID) is returned in the email template response payload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_email_template_with_http_info(etid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_email_template_with_http_info(etid, **kwargs)  # noqa: E501
            return data

    def delete_email_template_with_http_info(self, etid, **kwargs):  # noqa: E501
        """Delete a specific Email Template on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_email_template_with_http_info(etid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str etid: Email Template Identifier (ETID) is returned in the email template response payload (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['etid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_email_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'etid' is set
        if self.api_client.client_side_validation and ('etid' not in params or
                                                       params['etid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `etid` when calling `delete_email_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'etid' in params:
            path_params['etid'] = params['etid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/emailTemplates/{etid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_email_template(self, etid, **kwargs):  # noqa: E501
        """Get details for a specific Email Template on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_template(etid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str etid: Email Template Identifier (ETID) is returned in the email template response payload (required)
        :return: EmailTemplateViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_email_template_with_http_info(etid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_email_template_with_http_info(etid, **kwargs)  # noqa: E501
            return data

    def get_email_template_with_http_info(self, etid, **kwargs):  # noqa: E501
        """Get details for a specific Email Template on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_template_with_http_info(etid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str etid: Email Template Identifier (ETID) is returned in the email template response payload (required)
        :return: EmailTemplateViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['etid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'etid' is set
        if self.api_client.client_side_validation and ('etid' not in params or
                                                       params['etid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `etid` when calling `get_email_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'etid' in params:
            path_params['etid'] = params['etid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/emailTemplates/{etid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailTemplateViewVerbose',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_email_templates(self, **kwargs):  # noqa: E501
        """Get a list of all Email Templates on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_email_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int elements_per_block: specify the number of elements in a block.
        :param int page: specify the page number to return.
        :return: EmailTemplateListView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_email_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_email_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_email_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all Email Templates on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_email_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int elements_per_block: specify the number of elements in a block.
        :param int page: specify the page number to return.
        :return: EmailTemplateListView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['elements_per_block', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_email_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'elements_per_block' in params:
            query_params.append(('elementsPerBlock', params['elements_per_block']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/emailTemplates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailTemplateListView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_email_template(self, etid, **kwargs):  # noqa: E501
        """Update details for a specific Email Template on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_email_template(etid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str etid: Email Template Identifier (ETID) is returned in the email template response payload (required)
        :param UpdateEmailTemplateCriteria update_email_template_criteria: <strong>name</strong> - (Optional) A unique name to give the template.<br/><br/><strong>fromName</strong> - (Optional) The name that will appear in the From line of the email.<br/><br/><strong>subject</strong> - (Optional) The Subject of the email.<br/><br/><strong>headerImage</strong> - (Optional) A Base64 encoded string of an image that will show as the header of the email.<br/><br/><strong>headerImageAltText</strong> - (Optional) The Alt Text for the Header Image in the email.<br/><br/><strong>accentColor</strong> - (Optional) A Hex color value, six hexadecimal digits preceded by a pound sign, used as an accent in the email.<br/><br/><strong>messageBody</strong> - (Optional) The message body for the email. This is often used to let the recipient know why they have received the reward.<br/><br/><strong>closing</strong> - (Optional) After the reward credential, a space to close the message to the recipient<br/><br/><strong>customerServiceMessage</strong> - (Optional) If left null, Tango Card's Customer Support contact information will be included. Otherwise contact information for your customer support, if you are taking responsibility for providing first tier customer support of your recipients. <br/><br/><strong>accessControl</strong> - (Optional) Which Customers and/or Accounts should have access to this template.<br/><br/><strong>accessControl - type</strong> - The type of access being specified: PLATFORM, CUSTOMER or ACCOUNT.<br/><br/><strong>accessControl - identifier</strong> - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.<br/><br/><strong>defaults</strong> - If you want this template to be used at order time for the given Platform, Customer or Account when the Email Template Identifier (etid) is not provided with the order.<br/><br/><strong>defaults - type</strong> - The type of default being specified: PLATFORM, CUSTOMER or ACCOUNT.<br/><br/><strong>defaults - identifier</strong> - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.<br/><br/>
        :return: EmailTemplateViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_email_template_with_http_info(etid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_email_template_with_http_info(etid, **kwargs)  # noqa: E501
            return data

    def update_email_template_with_http_info(self, etid, **kwargs):  # noqa: E501
        """Update details for a specific Email Template on this Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_email_template_with_http_info(etid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str etid: Email Template Identifier (ETID) is returned in the email template response payload (required)
        :param UpdateEmailTemplateCriteria update_email_template_criteria: <strong>name</strong> - (Optional) A unique name to give the template.<br/><br/><strong>fromName</strong> - (Optional) The name that will appear in the From line of the email.<br/><br/><strong>subject</strong> - (Optional) The Subject of the email.<br/><br/><strong>headerImage</strong> - (Optional) A Base64 encoded string of an image that will show as the header of the email.<br/><br/><strong>headerImageAltText</strong> - (Optional) The Alt Text for the Header Image in the email.<br/><br/><strong>accentColor</strong> - (Optional) A Hex color value, six hexadecimal digits preceded by a pound sign, used as an accent in the email.<br/><br/><strong>messageBody</strong> - (Optional) The message body for the email. This is often used to let the recipient know why they have received the reward.<br/><br/><strong>closing</strong> - (Optional) After the reward credential, a space to close the message to the recipient<br/><br/><strong>customerServiceMessage</strong> - (Optional) If left null, Tango Card's Customer Support contact information will be included. Otherwise contact information for your customer support, if you are taking responsibility for providing first tier customer support of your recipients. <br/><br/><strong>accessControl</strong> - (Optional) Which Customers and/or Accounts should have access to this template.<br/><br/><strong>accessControl - type</strong> - The type of access being specified: PLATFORM, CUSTOMER or ACCOUNT.<br/><br/><strong>accessControl - identifier</strong> - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.<br/><br/><strong>defaults</strong> - If you want this template to be used at order time for the given Platform, Customer or Account when the Email Template Identifier (etid) is not provided with the order.<br/><br/><strong>defaults - type</strong> - The type of default being specified: PLATFORM, CUSTOMER or ACCOUNT.<br/><br/><strong>defaults - identifier</strong> - If the type is PLATFORM, the platform name or can be left blank. If the type is CUSTOMER OR ACCOUNT, the customerIdentifier or the accountIdentifier, respectively.<br/><br/>
        :return: EmailTemplateViewVerbose
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['etid', 'update_email_template_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'etid' is set
        if self.api_client.client_side_validation and ('etid' not in params or
                                                       params['etid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `etid` when calling `update_email_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'etid' in params:
            path_params['etid'] = params['etid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_email_template_criteria' in params:
            body_params = params['update_email_template_criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/emailTemplates/{etid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailTemplateViewVerbose',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

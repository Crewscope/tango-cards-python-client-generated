# coding: utf-8

"""
    Tango Card RaaS API

    <5. Ordersp>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tango_client.configuration import Configuration


class CreditCardDepositView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'amount': 'float',
        'amount_charged': 'float',
        'created_date': 'str',
        'fee_percent': 'float',
        'reference_deposit_id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'amount': 'amount',
        'amount_charged': 'amountCharged',
        'created_date': 'createdDate',
        'fee_percent': 'feePercent',
        'reference_deposit_id': 'referenceDepositID',
        'status': 'status'
    }

    def __init__(self, account_number=None, amount=None, amount_charged=None, created_date=None, fee_percent=None, reference_deposit_id=None, status=None, _configuration=None):  # noqa: E501
        """CreditCardDepositView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_number = None
        self._amount = None
        self._amount_charged = None
        self._created_date = None
        self._fee_percent = None
        self._reference_deposit_id = None
        self._status = None
        self.discriminator = None

        self.account_number = account_number
        self.amount = amount
        self.amount_charged = amount_charged
        self.created_date = created_date
        self.fee_percent = fee_percent
        self.reference_deposit_id = reference_deposit_id
        self.status = status

    @property
    def account_number(self):
        """Gets the account_number of this CreditCardDepositView.  # noqa: E501

        Account Number  # noqa: E501

        :return: The account_number of this CreditCardDepositView.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreditCardDepositView.

        Account Number  # noqa: E501

        :param account_number: The account_number of this CreditCardDepositView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this CreditCardDepositView.  # noqa: E501

        Amount funded in USD  # noqa: E501

        :return: The amount of this CreditCardDepositView.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreditCardDepositView.

        Amount funded in USD  # noqa: E501

        :param amount: The amount of this CreditCardDepositView.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def amount_charged(self):
        """Gets the amount_charged of this CreditCardDepositView.  # noqa: E501

        Amount charged in USD  # noqa: E501

        :return: The amount_charged of this CreditCardDepositView.  # noqa: E501
        :rtype: float
        """
        return self._amount_charged

    @amount_charged.setter
    def amount_charged(self, amount_charged):
        """Sets the amount_charged of this CreditCardDepositView.

        Amount charged in USD  # noqa: E501

        :param amount_charged: The amount_charged of this CreditCardDepositView.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and amount_charged is None:
            raise ValueError("Invalid value for `amount_charged`, must not be `None`")  # noqa: E501

        self._amount_charged = amount_charged

    @property
    def created_date(self):
        """Gets the created_date of this CreditCardDepositView.  # noqa: E501

        Date the credit card deposit was created  # noqa: E501

        :return: The created_date of this CreditCardDepositView.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CreditCardDepositView.

        Date the credit card deposit was created  # noqa: E501

        :param created_date: The created_date of this CreditCardDepositView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def fee_percent(self):
        """Gets the fee_percent of this CreditCardDepositView.  # noqa: E501

        Fee percent charged for credit card processing  # noqa: E501

        :return: The fee_percent of this CreditCardDepositView.  # noqa: E501
        :rtype: float
        """
        return self._fee_percent

    @fee_percent.setter
    def fee_percent(self, fee_percent):
        """Sets the fee_percent of this CreditCardDepositView.

        Fee percent charged for credit card processing  # noqa: E501

        :param fee_percent: The fee_percent of this CreditCardDepositView.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and fee_percent is None:
            raise ValueError("Invalid value for `fee_percent`, must not be `None`")  # noqa: E501

        self._fee_percent = fee_percent

    @property
    def reference_deposit_id(self):
        """Gets the reference_deposit_id of this CreditCardDepositView.  # noqa: E501

        Credit Card Deposit order reference ID  # noqa: E501

        :return: The reference_deposit_id of this CreditCardDepositView.  # noqa: E501
        :rtype: str
        """
        return self._reference_deposit_id

    @reference_deposit_id.setter
    def reference_deposit_id(self, reference_deposit_id):
        """Sets the reference_deposit_id of this CreditCardDepositView.

        Credit Card Deposit order reference ID  # noqa: E501

        :param reference_deposit_id: The reference_deposit_id of this CreditCardDepositView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and reference_deposit_id is None:
            raise ValueError("Invalid value for `reference_deposit_id`, must not be `None`")  # noqa: E501

        self._reference_deposit_id = reference_deposit_id

    @property
    def status(self):
        """Gets the status of this CreditCardDepositView.  # noqa: E501

        Status of the credit card deposit  # noqa: E501

        :return: The status of this CreditCardDepositView.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreditCardDepositView.

        Status of the credit card deposit  # noqa: E501

        :param status: The status of this CreditCardDepositView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardDepositView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardDepositView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreditCardDepositView):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Tango Card RaaS API

    <p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tango_client.configuration import Configuration


class CreateOrderCriteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_identifier': 'str',
        'amount': 'float',
        'campaign': 'str',
        'customer_identifier': 'str',
        'email_subject': 'str',
        'etid': 'str',
        'external_ref_id': 'str',
        'message': 'str',
        'notes': 'str',
        'recipient': 'RecipientInfoCriteria',
        'send_email': 'bool',
        'sender': 'SenderInfoCriteria',
        'utid': 'str'
    }

    attribute_map = {
        'account_identifier': 'accountIdentifier',
        'amount': 'amount',
        'campaign': 'campaign',
        'customer_identifier': 'customerIdentifier',
        'email_subject': 'emailSubject',
        'etid': 'etid',
        'external_ref_id': 'externalRefID',
        'message': 'message',
        'notes': 'notes',
        'recipient': 'recipient',
        'send_email': 'sendEmail',
        'sender': 'sender',
        'utid': 'utid'
    }

    def __init__(self, account_identifier=None, amount=None, campaign=None, customer_identifier=None, email_subject=None, etid=None, external_ref_id=None, message=None, notes=None, recipient=None, send_email=None, sender=None, utid=None, _configuration=None):  # noqa: E501
        """CreateOrderCriteria - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_identifier = None
        self._amount = None
        self._campaign = None
        self._customer_identifier = None
        self._email_subject = None
        self._etid = None
        self._external_ref_id = None
        self._message = None
        self._notes = None
        self._recipient = None
        self._send_email = None
        self._sender = None
        self._utid = None
        self.discriminator = None

        self.account_identifier = account_identifier
        self.amount = amount
        if campaign is not None:
            self.campaign = campaign
        self.customer_identifier = customer_identifier
        if email_subject is not None:
            self.email_subject = email_subject
        if etid is not None:
            self.etid = etid
        if external_ref_id is not None:
            self.external_ref_id = external_ref_id
        if message is not None:
            self.message = message
        if notes is not None:
            self.notes = notes
        if recipient is not None:
            self.recipient = recipient
        self.send_email = send_email
        if sender is not None:
            self.sender = sender
        self.utid = utid

    @property
    def account_identifier(self):
        """Gets the account_identifier of this CreateOrderCriteria.  # noqa: E501

        Account Identifier  # noqa: E501

        :return: The account_identifier of this CreateOrderCriteria.  # noqa: E501
        :rtype: str
        """
        return self._account_identifier

    @account_identifier.setter
    def account_identifier(self, account_identifier):
        """Sets the account_identifier of this CreateOrderCriteria.

        Account Identifier  # noqa: E501

        :param account_identifier: The account_identifier of this CreateOrderCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_identifier is None:
            raise ValueError("Invalid value for `account_identifier`, must not be `None`")  # noqa: E501

        self._account_identifier = account_identifier

    @property
    def amount(self):
        """Gets the amount of this CreateOrderCriteria.  # noqa: E501

        Amount  # noqa: E501

        :return: The amount of this CreateOrderCriteria.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateOrderCriteria.

        Amount  # noqa: E501

        :param amount: The amount of this CreateOrderCriteria.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def campaign(self):
        """Gets the campaign of this CreateOrderCriteria.  # noqa: E501

        Campaign  # noqa: E501

        :return: The campaign of this CreateOrderCriteria.  # noqa: E501
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this CreateOrderCriteria.

        Campaign  # noqa: E501

        :param campaign: The campaign of this CreateOrderCriteria.  # noqa: E501
        :type: str
        """

        self._campaign = campaign

    @property
    def customer_identifier(self):
        """Gets the customer_identifier of this CreateOrderCriteria.  # noqa: E501

        Customer Identifier  # noqa: E501

        :return: The customer_identifier of this CreateOrderCriteria.  # noqa: E501
        :rtype: str
        """
        return self._customer_identifier

    @customer_identifier.setter
    def customer_identifier(self, customer_identifier):
        """Sets the customer_identifier of this CreateOrderCriteria.

        Customer Identifier  # noqa: E501

        :param customer_identifier: The customer_identifier of this CreateOrderCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and customer_identifier is None:
            raise ValueError("Invalid value for `customer_identifier`, must not be `None`")  # noqa: E501

        self._customer_identifier = customer_identifier

    @property
    def email_subject(self):
        """Gets the email_subject of this CreateOrderCriteria.  # noqa: E501

        Email subject  # noqa: E501

        :return: The email_subject of this CreateOrderCriteria.  # noqa: E501
        :rtype: str
        """
        return self._email_subject

    @email_subject.setter
    def email_subject(self, email_subject):
        """Sets the email_subject of this CreateOrderCriteria.

        Email subject  # noqa: E501

        :param email_subject: The email_subject of this CreateOrderCriteria.  # noqa: E501
        :type: str
        """

        self._email_subject = email_subject

    @property
    def etid(self):
        """Gets the etid of this CreateOrderCriteria.  # noqa: E501

        Email Template Identifier  # noqa: E501

        :return: The etid of this CreateOrderCriteria.  # noqa: E501
        :rtype: str
        """
        return self._etid

    @etid.setter
    def etid(self, etid):
        """Sets the etid of this CreateOrderCriteria.

        Email Template Identifier  # noqa: E501

        :param etid: The etid of this CreateOrderCriteria.  # noqa: E501
        :type: str
        """

        self._etid = etid

    @property
    def external_ref_id(self):
        """Gets the external_ref_id of this CreateOrderCriteria.  # noqa: E501

        External Reference ID  # noqa: E501

        :return: The external_ref_id of this CreateOrderCriteria.  # noqa: E501
        :rtype: str
        """
        return self._external_ref_id

    @external_ref_id.setter
    def external_ref_id(self, external_ref_id):
        """Sets the external_ref_id of this CreateOrderCriteria.

        External Reference ID  # noqa: E501

        :param external_ref_id: The external_ref_id of this CreateOrderCriteria.  # noqa: E501
        :type: str
        """

        self._external_ref_id = external_ref_id

    @property
    def message(self):
        """Gets the message of this CreateOrderCriteria.  # noqa: E501

        Message  # noqa: E501

        :return: The message of this CreateOrderCriteria.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateOrderCriteria.

        Message  # noqa: E501

        :param message: The message of this CreateOrderCriteria.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def notes(self):
        """Gets the notes of this CreateOrderCriteria.  # noqa: E501

        Notes  # noqa: E501

        :return: The notes of this CreateOrderCriteria.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateOrderCriteria.

        Notes  # noqa: E501

        :param notes: The notes of this CreateOrderCriteria.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def recipient(self):
        """Gets the recipient of this CreateOrderCriteria.  # noqa: E501

        Recipient Details  # noqa: E501

        :return: The recipient of this CreateOrderCriteria.  # noqa: E501
        :rtype: RecipientInfoCriteria
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this CreateOrderCriteria.

        Recipient Details  # noqa: E501

        :param recipient: The recipient of this CreateOrderCriteria.  # noqa: E501
        :type: RecipientInfoCriteria
        """

        self._recipient = recipient

    @property
    def send_email(self):
        """Gets the send_email of this CreateOrderCriteria.  # noqa: E501

        Send Email  # noqa: E501

        :return: The send_email of this CreateOrderCriteria.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this CreateOrderCriteria.

        Send Email  # noqa: E501

        :param send_email: The send_email of this CreateOrderCriteria.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and send_email is None:
            raise ValueError("Invalid value for `send_email`, must not be `None`")  # noqa: E501

        self._send_email = send_email

    @property
    def sender(self):
        """Gets the sender of this CreateOrderCriteria.  # noqa: E501

        Sender Details  # noqa: E501

        :return: The sender of this CreateOrderCriteria.  # noqa: E501
        :rtype: SenderInfoCriteria
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this CreateOrderCriteria.

        Sender Details  # noqa: E501

        :param sender: The sender of this CreateOrderCriteria.  # noqa: E501
        :type: SenderInfoCriteria
        """

        self._sender = sender

    @property
    def utid(self):
        """Gets the utid of this CreateOrderCriteria.  # noqa: E501

        Unique Tango Card Identifier  # noqa: E501

        :return: The utid of this CreateOrderCriteria.  # noqa: E501
        :rtype: str
        """
        return self._utid

    @utid.setter
    def utid(self, utid):
        """Sets the utid of this CreateOrderCriteria.

        Unique Tango Card Identifier  # noqa: E501

        :param utid: The utid of this CreateOrderCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and utid is None:
            raise ValueError("Invalid value for `utid`, must not be `None`")  # noqa: E501

        self._utid = utid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOrderCriteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrderCriteria):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateOrderCriteria):
            return True

        return self.to_dict() != other.to_dict()

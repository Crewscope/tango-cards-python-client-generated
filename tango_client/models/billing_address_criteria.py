# coding: utf-8

"""
    Tango Card RaaS API

    <p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tango_client.configuration import Configuration


class BillingAddressCriteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'country': 'str',
        'email_address': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'postal_code': 'str',
        'state': 'str'
    }

    attribute_map = {
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'city': 'city',
        'country': 'country',
        'email_address': 'emailAddress',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'postal_code': 'postalCode',
        'state': 'state'
    }

    def __init__(self, address_line1=None, address_line2=None, city=None, country=None, email_address=None, first_name=None, last_name=None, postal_code=None, state=None, _configuration=None):  # noqa: E501
        """BillingAddressCriteria - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._country = None
        self._email_address = None
        self._first_name = None
        self._last_name = None
        self._postal_code = None
        self._state = None
        self.discriminator = None

        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        self.city = city
        self.country = country
        self.email_address = email_address
        self.first_name = first_name
        self.last_name = last_name
        self.postal_code = postal_code
        self.state = state

    @property
    def address_line1(self):
        """Gets the address_line1 of this BillingAddressCriteria.  # noqa: E501

        Address Line 1  # noqa: E501

        :return: The address_line1 of this BillingAddressCriteria.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this BillingAddressCriteria.

        Address Line 1  # noqa: E501

        :param address_line1: The address_line1 of this BillingAddressCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this BillingAddressCriteria.  # noqa: E501

        Address Line 2  # noqa: E501

        :return: The address_line2 of this BillingAddressCriteria.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this BillingAddressCriteria.

        Address Line 2  # noqa: E501

        :param address_line2: The address_line2 of this BillingAddressCriteria.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this BillingAddressCriteria.  # noqa: E501

        City  # noqa: E501

        :return: The city of this BillingAddressCriteria.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this BillingAddressCriteria.

        City  # noqa: E501

        :param city: The city of this BillingAddressCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def country(self):
        """Gets the country of this BillingAddressCriteria.  # noqa: E501

        Country  # noqa: E501

        :return: The country of this BillingAddressCriteria.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BillingAddressCriteria.

        Country  # noqa: E501

        :param country: The country of this BillingAddressCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def email_address(self):
        """Gets the email_address of this BillingAddressCriteria.  # noqa: E501

        Email Address  # noqa: E501

        :return: The email_address of this BillingAddressCriteria.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this BillingAddressCriteria.

        Email Address  # noqa: E501

        :param email_address: The email_address of this BillingAddressCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this BillingAddressCriteria.  # noqa: E501

        First Name  # noqa: E501

        :return: The first_name of this BillingAddressCriteria.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this BillingAddressCriteria.

        First Name  # noqa: E501

        :param first_name: The first_name of this BillingAddressCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this BillingAddressCriteria.  # noqa: E501

        Last Name  # noqa: E501

        :return: The last_name of this BillingAddressCriteria.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this BillingAddressCriteria.

        Last Name  # noqa: E501

        :param last_name: The last_name of this BillingAddressCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def postal_code(self):
        """Gets the postal_code of this BillingAddressCriteria.  # noqa: E501

        Postal Code  # noqa: E501

        :return: The postal_code of this BillingAddressCriteria.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this BillingAddressCriteria.

        Postal Code  # noqa: E501

        :param postal_code: The postal_code of this BillingAddressCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this BillingAddressCriteria.  # noqa: E501

        State  # noqa: E501

        :return: The state of this BillingAddressCriteria.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BillingAddressCriteria.

        State  # noqa: E501

        :param state: The state of this BillingAddressCriteria.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingAddressCriteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingAddressCriteria):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BillingAddressCriteria):
            return True

        return self.to_dict() != other.to_dict()

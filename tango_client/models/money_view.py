# coding: utf-8

"""
    Tango Card RaaS API

    <5. Ordersp>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tango_client.configuration import Configuration


class MoneyView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_code': 'str',
        'exchange_rate': 'float',
        'fee': 'float',
        'total': 'float',
        'value': 'float'
    }

    attribute_map = {
        'currency_code': 'currencyCode',
        'exchange_rate': 'exchangeRate',
        'fee': 'fee',
        'total': 'total',
        'value': 'value'
    }

    def __init__(self, currency_code=None, exchange_rate=None, fee=None, total=None, value=None, _configuration=None):  # noqa: E501
        """MoneyView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency_code = None
        self._exchange_rate = None
        self._fee = None
        self._total = None
        self._value = None
        self.discriminator = None

        if currency_code is not None:
            self.currency_code = currency_code
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if fee is not None:
            self.fee = fee
        if total is not None:
            self.total = total
        if value is not None:
            self.value = value

    @property
    def currency_code(self):
        """Gets the currency_code of this MoneyView.  # noqa: E501


        :return: The currency_code of this MoneyView.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MoneyView.


        :param currency_code: The currency_code of this MoneyView.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this MoneyView.  # noqa: E501


        :return: The exchange_rate of this MoneyView.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this MoneyView.


        :param exchange_rate: The exchange_rate of this MoneyView.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def fee(self):
        """Gets the fee of this MoneyView.  # noqa: E501


        :return: The fee of this MoneyView.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this MoneyView.


        :param fee: The fee of this MoneyView.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def total(self):
        """Gets the total of this MoneyView.  # noqa: E501


        :return: The total of this MoneyView.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this MoneyView.


        :param total: The total of this MoneyView.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def value(self):
        """Gets the value of this MoneyView.  # noqa: E501


        :return: The value of this MoneyView.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MoneyView.


        :param value: The value of this MoneyView.  # noqa: E501
        :type: float
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MoneyView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MoneyView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MoneyView):
            return True

        return self.to_dict() != other.to_dict()

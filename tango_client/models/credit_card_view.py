# coding: utf-8

"""
    Tango Card RaaS API

    <p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tango_client.configuration import Configuration


class CreditCardView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_identifier': 'str',
        'account_number': 'str',
        'activation_date': 'str',
        'contact_information': 'list[ContactInformationView]',
        'created_date': 'str',
        'customer_identifier': 'str',
        'expiration_date': 'str',
        'label': 'str',
        'last_four_digits': 'str',
        'status': 'str',
        'token': 'str'
    }

    attribute_map = {
        'account_identifier': 'accountIdentifier',
        'account_number': 'accountNumber',
        'activation_date': 'activationDate',
        'contact_information': 'contactInformation',
        'created_date': 'createdDate',
        'customer_identifier': 'customerIdentifier',
        'expiration_date': 'expirationDate',
        'label': 'label',
        'last_four_digits': 'lastFourDigits',
        'status': 'status',
        'token': 'token'
    }

    def __init__(self, account_identifier=None, account_number=None, activation_date=None, contact_information=None, created_date=None, customer_identifier=None, expiration_date=None, label=None, last_four_digits=None, status=None, token=None, _configuration=None):  # noqa: E501
        """CreditCardView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_identifier = None
        self._account_number = None
        self._activation_date = None
        self._contact_information = None
        self._created_date = None
        self._customer_identifier = None
        self._expiration_date = None
        self._label = None
        self._last_four_digits = None
        self._status = None
        self._token = None
        self.discriminator = None

        self.account_identifier = account_identifier
        self.account_number = account_number
        self.activation_date = activation_date
        self.contact_information = contact_information
        self.created_date = created_date
        self.customer_identifier = customer_identifier
        self.expiration_date = expiration_date
        self.label = label
        self.last_four_digits = last_four_digits
        self.status = status
        self.token = token

    @property
    def account_identifier(self):
        """Gets the account_identifier of this CreditCardView.  # noqa: E501

        Account Identifier  # noqa: E501

        :return: The account_identifier of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._account_identifier

    @account_identifier.setter
    def account_identifier(self, account_identifier):
        """Sets the account_identifier of this CreditCardView.

        Account Identifier  # noqa: E501

        :param account_identifier: The account_identifier of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_identifier is None:
            raise ValueError("Invalid value for `account_identifier`, must not be `None`")  # noqa: E501

        self._account_identifier = account_identifier

    @property
    def account_number(self):
        """Gets the account_number of this CreditCardView.  # noqa: E501

        Account Number  # noqa: E501

        :return: The account_number of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreditCardView.

        Account Number  # noqa: E501

        :param account_number: The account_number of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def activation_date(self):
        """Gets the activation_date of this CreditCardView.  # noqa: E501

        Date when the the credit card will be activated for use in funding  # noqa: E501

        :return: The activation_date of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this CreditCardView.

        Date when the the credit card will be activated for use in funding  # noqa: E501

        :param activation_date: The activation_date of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and activation_date is None:
            raise ValueError("Invalid value for `activation_date`, must not be `None`")  # noqa: E501

        self._activation_date = activation_date

    @property
    def contact_information(self):
        """Gets the contact_information of this CreditCardView.  # noqa: E501

        List of contact information for funding confirmation emails  # noqa: E501

        :return: The contact_information of this CreditCardView.  # noqa: E501
        :rtype: list[ContactInformationView]
        """
        return self._contact_information

    @contact_information.setter
    def contact_information(self, contact_information):
        """Sets the contact_information of this CreditCardView.

        List of contact information for funding confirmation emails  # noqa: E501

        :param contact_information: The contact_information of this CreditCardView.  # noqa: E501
        :type: list[ContactInformationView]
        """
        if self._configuration.client_side_validation and contact_information is None:
            raise ValueError("Invalid value for `contact_information`, must not be `None`")  # noqa: E501

        self._contact_information = contact_information

    @property
    def created_date(self):
        """Gets the created_date of this CreditCardView.  # noqa: E501

        Date the credit card was created  # noqa: E501

        :return: The created_date of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CreditCardView.

        Date the credit card was created  # noqa: E501

        :param created_date: The created_date of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def customer_identifier(self):
        """Gets the customer_identifier of this CreditCardView.  # noqa: E501

        Customer Identifier  # noqa: E501

        :return: The customer_identifier of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._customer_identifier

    @customer_identifier.setter
    def customer_identifier(self, customer_identifier):
        """Sets the customer_identifier of this CreditCardView.

        Customer Identifier  # noqa: E501

        :param customer_identifier: The customer_identifier of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and customer_identifier is None:
            raise ValueError("Invalid value for `customer_identifier`, must not be `None`")  # noqa: E501

        self._customer_identifier = customer_identifier

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CreditCardView.  # noqa: E501

        Expiration date of the registered card in YYYY-MM format  # noqa: E501

        :return: The expiration_date of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CreditCardView.

        Expiration date of the registered card in YYYY-MM format  # noqa: E501

        :param expiration_date: The expiration_date of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")  # noqa: E501

        self._expiration_date = expiration_date

    @property
    def label(self):
        """Gets the label of this CreditCardView.  # noqa: E501

        Credit Card label  # noqa: E501

        :return: The label of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CreditCardView.

        Credit Card label  # noqa: E501

        :param label: The label of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def last_four_digits(self):
        """Gets the last_four_digits of this CreditCardView.  # noqa: E501

        Last four digits of the registered credit card  # noqa: E501

        :return: The last_four_digits of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._last_four_digits

    @last_four_digits.setter
    def last_four_digits(self, last_four_digits):
        """Sets the last_four_digits of this CreditCardView.

        Last four digits of the registered credit card  # noqa: E501

        :param last_four_digits: The last_four_digits of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_four_digits is None:
            raise ValueError("Invalid value for `last_four_digits`, must not be `None`")  # noqa: E501

        self._last_four_digits = last_four_digits

    @property
    def status(self):
        """Gets the status of this CreditCardView.  # noqa: E501

        Status of the registered card  # noqa: E501

        :return: The status of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreditCardView.

        Status of the registered card  # noqa: E501

        :param status: The status of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def token(self):
        """Gets the token of this CreditCardView.  # noqa: E501

        Credit Card token identifier  # noqa: E501

        :return: The token of this CreditCardView.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CreditCardView.

        Credit Card token identifier  # noqa: E501

        :param token: The token of this CreditCardView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreditCardView):
            return True

        return self.to_dict() != other.to_dict()

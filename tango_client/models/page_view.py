# coding: utf-8

"""
    Tango Card RaaS API

    <p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tango_client.configuration import Configuration


class PageView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elements_per_block': 'int',
        'number': 'int',
        'result_count': 'int',
        'total_count': 'int'
    }

    attribute_map = {
        'elements_per_block': 'elementsPerBlock',
        'number': 'number',
        'result_count': 'resultCount',
        'total_count': 'totalCount'
    }

    def __init__(self, elements_per_block=None, number=None, result_count=None, total_count=None, _configuration=None):  # noqa: E501
        """PageView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._elements_per_block = None
        self._number = None
        self._result_count = None
        self._total_count = None
        self.discriminator = None

        self.elements_per_block = elements_per_block
        self.number = number
        self.result_count = result_count
        self.total_count = total_count

    @property
    def elements_per_block(self):
        """Gets the elements_per_block of this PageView.  # noqa: E501

        Total number of elements per page  # noqa: E501

        :return: The elements_per_block of this PageView.  # noqa: E501
        :rtype: int
        """
        return self._elements_per_block

    @elements_per_block.setter
    def elements_per_block(self, elements_per_block):
        """Sets the elements_per_block of this PageView.

        Total number of elements per page  # noqa: E501

        :param elements_per_block: The elements_per_block of this PageView.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and elements_per_block is None:
            raise ValueError("Invalid value for `elements_per_block`, must not be `None`")  # noqa: E501

        self._elements_per_block = elements_per_block

    @property
    def number(self):
        """Gets the number of this PageView.  # noqa: E501

        Current page number  # noqa: E501

        :return: The number of this PageView.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PageView.

        Current page number  # noqa: E501

        :param number: The number of this PageView.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def result_count(self):
        """Gets the result_count of this PageView.  # noqa: E501

        Total number of elements in the current page  # noqa: E501

        :return: The result_count of this PageView.  # noqa: E501
        :rtype: int
        """
        return self._result_count

    @result_count.setter
    def result_count(self, result_count):
        """Sets the result_count of this PageView.

        Total number of elements in the current page  # noqa: E501

        :param result_count: The result_count of this PageView.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and result_count is None:
            raise ValueError("Invalid value for `result_count`, must not be `None`")  # noqa: E501

        self._result_count = result_count

    @property
    def total_count(self):
        """Gets the total_count of this PageView.  # noqa: E501

        Total number of elements  # noqa: E501

        :return: The total_count of this PageView.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this PageView.

        Total number of elements  # noqa: E501

        :param total_count: The total_count of this PageView.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PageView):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Tango Card RaaS API

    <5. Ordersp>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tango_client.configuration import Configuration


class BrandViewWithItemsVerbose(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brand_key': 'str',
        'brand_name': 'str',
        'brand_requirements': 'BrandRequirements',
        'created_date': 'str',
        'description': 'str',
        'disclaimer': 'str',
        'image_urls': 'dict(str, str)',
        'items': 'list[ItemViewVerbose]',
        'last_update_date': 'str',
        'short_description': 'str',
        'status': 'str',
        'terms': 'str'
    }

    attribute_map = {
        'brand_key': 'brandKey',
        'brand_name': 'brandName',
        'brand_requirements': 'brandRequirements',
        'created_date': 'createdDate',
        'description': 'description',
        'disclaimer': 'disclaimer',
        'image_urls': 'imageUrls',
        'items': 'items',
        'last_update_date': 'lastUpdateDate',
        'short_description': 'shortDescription',
        'status': 'status',
        'terms': 'terms'
    }

    def __init__(self, brand_key=None, brand_name=None, brand_requirements=None, created_date=None, description=None, disclaimer=None, image_urls=None, items=None, last_update_date=None, short_description=None, status=None, terms=None, _configuration=None):  # noqa: E501
        """BrandViewWithItemsVerbose - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._brand_key = None
        self._brand_name = None
        self._brand_requirements = None
        self._created_date = None
        self._description = None
        self._disclaimer = None
        self._image_urls = None
        self._items = None
        self._last_update_date = None
        self._short_description = None
        self._status = None
        self._terms = None
        self.discriminator = None

        self.brand_key = brand_key
        self.brand_name = brand_name
        if brand_requirements is not None:
            self.brand_requirements = brand_requirements
        self.created_date = created_date
        self.description = description
        self.disclaimer = disclaimer
        self.image_urls = image_urls
        self.items = items
        self.last_update_date = last_update_date
        self.short_description = short_description
        self.status = status
        self.terms = terms

    @property
    def brand_key(self):
        """Gets the brand_key of this BrandViewWithItemsVerbose.  # noqa: E501

        Brand Key  # noqa: E501

        :return: The brand_key of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: str
        """
        return self._brand_key

    @brand_key.setter
    def brand_key(self, brand_key):
        """Sets the brand_key of this BrandViewWithItemsVerbose.

        Brand Key  # noqa: E501

        :param brand_key: The brand_key of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and brand_key is None:
            raise ValueError("Invalid value for `brand_key`, must not be `None`")  # noqa: E501

        self._brand_key = brand_key

    @property
    def brand_name(self):
        """Gets the brand_name of this BrandViewWithItemsVerbose.  # noqa: E501

        Brand Display Name  # noqa: E501

        :return: The brand_name of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this BrandViewWithItemsVerbose.

        Brand Display Name  # noqa: E501

        :param brand_name: The brand_name of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")  # noqa: E501

        self._brand_name = brand_name

    @property
    def brand_requirements(self):
        """Gets the brand_requirements of this BrandViewWithItemsVerbose.  # noqa: E501

        Brand Requirements  # noqa: E501

        :return: The brand_requirements of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: BrandRequirements
        """
        return self._brand_requirements

    @brand_requirements.setter
    def brand_requirements(self, brand_requirements):
        """Sets the brand_requirements of this BrandViewWithItemsVerbose.

        Brand Requirements  # noqa: E501

        :param brand_requirements: The brand_requirements of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: BrandRequirements
        """

        self._brand_requirements = brand_requirements

    @property
    def created_date(self):
        """Gets the created_date of this BrandViewWithItemsVerbose.  # noqa: E501

        Created Date  # noqa: E501

        :return: The created_date of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this BrandViewWithItemsVerbose.

        Created Date  # noqa: E501

        :param created_date: The created_date of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def description(self):
        """Gets the description of this BrandViewWithItemsVerbose.  # noqa: E501

        Brand Description  # noqa: E501

        :return: The description of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BrandViewWithItemsVerbose.

        Brand Description  # noqa: E501

        :param description: The description of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def disclaimer(self):
        """Gets the disclaimer of this BrandViewWithItemsVerbose.  # noqa: E501

        Brand Disclaimer  # noqa: E501

        :return: The disclaimer of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: str
        """
        return self._disclaimer

    @disclaimer.setter
    def disclaimer(self, disclaimer):
        """Sets the disclaimer of this BrandViewWithItemsVerbose.

        Brand Disclaimer  # noqa: E501

        :param disclaimer: The disclaimer of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and disclaimer is None:
            raise ValueError("Invalid value for `disclaimer`, must not be `None`")  # noqa: E501

        self._disclaimer = disclaimer

    @property
    def image_urls(self):
        """Gets the image_urls of this BrandViewWithItemsVerbose.  # noqa: E501

        Brand Images in various sizes  # noqa: E501

        :return: The image_urls of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._image_urls

    @image_urls.setter
    def image_urls(self, image_urls):
        """Sets the image_urls of this BrandViewWithItemsVerbose.

        Brand Images in various sizes  # noqa: E501

        :param image_urls: The image_urls of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: dict(str, str)
        """
        if self._configuration.client_side_validation and image_urls is None:
            raise ValueError("Invalid value for `image_urls`, must not be `None`")  # noqa: E501

        self._image_urls = image_urls

    @property
    def items(self):
        """Gets the items of this BrandViewWithItemsVerbose.  # noqa: E501

        List of Items associated with this Brand  # noqa: E501

        :return: The items of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: list[ItemViewVerbose]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BrandViewWithItemsVerbose.

        List of Items associated with this Brand  # noqa: E501

        :param items: The items of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: list[ItemViewVerbose]
        """
        if self._configuration.client_side_validation and items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def last_update_date(self):
        """Gets the last_update_date of this BrandViewWithItemsVerbose.  # noqa: E501

        Last Updated Date  # noqa: E501

        :return: The last_update_date of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: str
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this BrandViewWithItemsVerbose.

        Last Updated Date  # noqa: E501

        :param last_update_date: The last_update_date of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_update_date is None:
            raise ValueError("Invalid value for `last_update_date`, must not be `None`")  # noqa: E501

        self._last_update_date = last_update_date

    @property
    def short_description(self):
        """Gets the short_description of this BrandViewWithItemsVerbose.  # noqa: E501

        Short Description  # noqa: E501

        :return: The short_description of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this BrandViewWithItemsVerbose.

        Short Description  # noqa: E501

        :param short_description: The short_description of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")  # noqa: E501

        self._short_description = short_description

    @property
    def status(self):
        """Gets the status of this BrandViewWithItemsVerbose.  # noqa: E501

        Brand Status  # noqa: E501

        :return: The status of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BrandViewWithItemsVerbose.

        Brand Status  # noqa: E501

        :param status: The status of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def terms(self):
        """Gets the terms of this BrandViewWithItemsVerbose.  # noqa: E501

        Brand Terms and Conditions  # noqa: E501

        :return: The terms of this BrandViewWithItemsVerbose.  # noqa: E501
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this BrandViewWithItemsVerbose.

        Brand Terms and Conditions  # noqa: E501

        :param terms: The terms of this BrandViewWithItemsVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and terms is None:
            raise ValueError("Invalid value for `terms`, must not be `None`")  # noqa: E501

        self._terms = terms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrandViewWithItemsVerbose, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandViewWithItemsVerbose):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrandViewWithItemsVerbose):
            return True

        return self.to_dict() != other.to_dict()

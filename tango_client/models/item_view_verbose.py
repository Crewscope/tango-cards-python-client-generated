# coding: utf-8

"""
    Tango Card RaaS API

    <p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tango_client.configuration import Configuration


class ItemViewVerbose(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'countries': 'list[str]',
        'created_date': 'str',
        'credential_types': 'list[str]',
        'currency_code': 'str',
        'exchange_rate_rule': 'str',
        'face_value': 'float',
        'fee': 'CostAdjustmentEntity',
        'is_whole_amount_value_required': 'bool',
        'last_update_date': 'str',
        'max_value': 'float',
        'min_value': 'float',
        'redemption_instructions': 'str',
        'reward_name': 'str',
        'reward_type': 'str',
        'status': 'str',
        'utid': 'str',
        'value_type': 'str'
    }

    attribute_map = {
        'countries': 'countries',
        'created_date': 'createdDate',
        'credential_types': 'credentialTypes',
        'currency_code': 'currencyCode',
        'exchange_rate_rule': 'exchangeRateRule',
        'face_value': 'faceValue',
        'fee': 'fee',
        'is_whole_amount_value_required': 'isWholeAmountValueRequired',
        'last_update_date': 'lastUpdateDate',
        'max_value': 'maxValue',
        'min_value': 'minValue',
        'redemption_instructions': 'redemptionInstructions',
        'reward_name': 'rewardName',
        'reward_type': 'rewardType',
        'status': 'status',
        'utid': 'utid',
        'value_type': 'valueType'
    }

    def __init__(self, countries=None, created_date=None, credential_types=None, currency_code=None, exchange_rate_rule=None, face_value=None, fee=None, is_whole_amount_value_required=None, last_update_date=None, max_value=None, min_value=None, redemption_instructions=None, reward_name=None, reward_type=None, status=None, utid=None, value_type=None, _configuration=None):  # noqa: E501
        """ItemViewVerbose - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._countries = None
        self._created_date = None
        self._credential_types = None
        self._currency_code = None
        self._exchange_rate_rule = None
        self._face_value = None
        self._fee = None
        self._is_whole_amount_value_required = None
        self._last_update_date = None
        self._max_value = None
        self._min_value = None
        self._redemption_instructions = None
        self._reward_name = None
        self._reward_type = None
        self._status = None
        self._utid = None
        self._value_type = None
        self.discriminator = None

        self.countries = countries
        self.created_date = created_date
        self.credential_types = credential_types
        self.currency_code = currency_code
        if exchange_rate_rule is not None:
            self.exchange_rate_rule = exchange_rate_rule
        if face_value is not None:
            self.face_value = face_value
        self.fee = fee
        self.is_whole_amount_value_required = is_whole_amount_value_required
        self.last_update_date = last_update_date
        if max_value is not None:
            self.max_value = max_value
        if min_value is not None:
            self.min_value = min_value
        self.redemption_instructions = redemption_instructions
        self.reward_name = reward_name
        self.reward_type = reward_type
        self.status = status
        self.utid = utid
        self.value_type = value_type

    @property
    def countries(self):
        """Gets the countries of this ItemViewVerbose.  # noqa: E501

        Countries  # noqa: E501

        :return: The countries of this ItemViewVerbose.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ItemViewVerbose.

        Countries  # noqa: E501

        :param countries: The countries of this ItemViewVerbose.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and countries is None:
            raise ValueError("Invalid value for `countries`, must not be `None`")  # noqa: E501

        self._countries = countries

    @property
    def created_date(self):
        """Gets the created_date of this ItemViewVerbose.  # noqa: E501

        Created Date  # noqa: E501

        :return: The created_date of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ItemViewVerbose.

        Created Date  # noqa: E501

        :param created_date: The created_date of this ItemViewVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def credential_types(self):
        """Gets the credential_types of this ItemViewVerbose.  # noqa: E501

        Credential Types  # noqa: E501

        :return: The credential_types of this ItemViewVerbose.  # noqa: E501
        :rtype: list[str]
        """
        return self._credential_types

    @credential_types.setter
    def credential_types(self, credential_types):
        """Sets the credential_types of this ItemViewVerbose.

        Credential Types  # noqa: E501

        :param credential_types: The credential_types of this ItemViewVerbose.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and credential_types is None:
            raise ValueError("Invalid value for `credential_types`, must not be `None`")  # noqa: E501

        self._credential_types = credential_types

    @property
    def currency_code(self):
        """Gets the currency_code of this ItemViewVerbose.  # noqa: E501

        Currency Code  # noqa: E501

        :return: The currency_code of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ItemViewVerbose.

        Currency Code  # noqa: E501

        :param currency_code: The currency_code of this ItemViewVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def exchange_rate_rule(self):
        """Gets the exchange_rate_rule of this ItemViewVerbose.  # noqa: E501

        Exchange Rate Rule  # noqa: E501

        :return: The exchange_rate_rule of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate_rule

    @exchange_rate_rule.setter
    def exchange_rate_rule(self, exchange_rate_rule):
        """Sets the exchange_rate_rule of this ItemViewVerbose.

        Exchange Rate Rule  # noqa: E501

        :param exchange_rate_rule: The exchange_rate_rule of this ItemViewVerbose.  # noqa: E501
        :type: str
        """

        self._exchange_rate_rule = exchange_rate_rule

    @property
    def face_value(self):
        """Gets the face_value of this ItemViewVerbose.  # noqa: E501

        Face Value  # noqa: E501

        :return: The face_value of this ItemViewVerbose.  # noqa: E501
        :rtype: float
        """
        return self._face_value

    @face_value.setter
    def face_value(self, face_value):
        """Sets the face_value of this ItemViewVerbose.

        Face Value  # noqa: E501

        :param face_value: The face_value of this ItemViewVerbose.  # noqa: E501
        :type: float
        """

        self._face_value = face_value

    @property
    def fee(self):
        """Gets the fee of this ItemViewVerbose.  # noqa: E501

        Fee  # noqa: E501

        :return: The fee of this ItemViewVerbose.  # noqa: E501
        :rtype: CostAdjustmentEntity
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this ItemViewVerbose.

        Fee  # noqa: E501

        :param fee: The fee of this ItemViewVerbose.  # noqa: E501
        :type: CostAdjustmentEntity
        """
        if self._configuration.client_side_validation and fee is None:
            raise ValueError("Invalid value for `fee`, must not be `None`")  # noqa: E501

        self._fee = fee

    @property
    def is_whole_amount_value_required(self):
        """Gets the is_whole_amount_value_required of this ItemViewVerbose.  # noqa: E501

        Whole Value Required  # noqa: E501

        :return: The is_whole_amount_value_required of this ItemViewVerbose.  # noqa: E501
        :rtype: bool
        """
        return self._is_whole_amount_value_required

    @is_whole_amount_value_required.setter
    def is_whole_amount_value_required(self, is_whole_amount_value_required):
        """Sets the is_whole_amount_value_required of this ItemViewVerbose.

        Whole Value Required  # noqa: E501

        :param is_whole_amount_value_required: The is_whole_amount_value_required of this ItemViewVerbose.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_whole_amount_value_required is None:
            raise ValueError("Invalid value for `is_whole_amount_value_required`, must not be `None`")  # noqa: E501

        self._is_whole_amount_value_required = is_whole_amount_value_required

    @property
    def last_update_date(self):
        """Gets the last_update_date of this ItemViewVerbose.  # noqa: E501

        Last Updated Date  # noqa: E501

        :return: The last_update_date of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this ItemViewVerbose.

        Last Updated Date  # noqa: E501

        :param last_update_date: The last_update_date of this ItemViewVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_update_date is None:
            raise ValueError("Invalid value for `last_update_date`, must not be `None`")  # noqa: E501

        self._last_update_date = last_update_date

    @property
    def max_value(self):
        """Gets the max_value of this ItemViewVerbose.  # noqa: E501

        Max Value  # noqa: E501

        :return: The max_value of this ItemViewVerbose.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this ItemViewVerbose.

        Max Value  # noqa: E501

        :param max_value: The max_value of this ItemViewVerbose.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this ItemViewVerbose.  # noqa: E501

        Min Value  # noqa: E501

        :return: The min_value of this ItemViewVerbose.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this ItemViewVerbose.

        Min Value  # noqa: E501

        :param min_value: The min_value of this ItemViewVerbose.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def redemption_instructions(self):
        """Gets the redemption_instructions of this ItemViewVerbose.  # noqa: E501

        Redemption Instructions  # noqa: E501

        :return: The redemption_instructions of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._redemption_instructions

    @redemption_instructions.setter
    def redemption_instructions(self, redemption_instructions):
        """Sets the redemption_instructions of this ItemViewVerbose.

        Redemption Instructions  # noqa: E501

        :param redemption_instructions: The redemption_instructions of this ItemViewVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and redemption_instructions is None:
            raise ValueError("Invalid value for `redemption_instructions`, must not be `None`")  # noqa: E501

        self._redemption_instructions = redemption_instructions

    @property
    def reward_name(self):
        """Gets the reward_name of this ItemViewVerbose.  # noqa: E501

        Reward Name  # noqa: E501

        :return: The reward_name of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._reward_name

    @reward_name.setter
    def reward_name(self, reward_name):
        """Sets the reward_name of this ItemViewVerbose.

        Reward Name  # noqa: E501

        :param reward_name: The reward_name of this ItemViewVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and reward_name is None:
            raise ValueError("Invalid value for `reward_name`, must not be `None`")  # noqa: E501

        self._reward_name = reward_name

    @property
    def reward_type(self):
        """Gets the reward_type of this ItemViewVerbose.  # noqa: E501

        Reward Type  # noqa: E501

        :return: The reward_type of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._reward_type

    @reward_type.setter
    def reward_type(self, reward_type):
        """Sets the reward_type of this ItemViewVerbose.

        Reward Type  # noqa: E501

        :param reward_type: The reward_type of this ItemViewVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and reward_type is None:
            raise ValueError("Invalid value for `reward_type`, must not be `None`")  # noqa: E501

        self._reward_type = reward_type

    @property
    def status(self):
        """Gets the status of this ItemViewVerbose.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ItemViewVerbose.

        Status  # noqa: E501

        :param status: The status of this ItemViewVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def utid(self):
        """Gets the utid of this ItemViewVerbose.  # noqa: E501

        Utid - Unique Tango Card ID.  # noqa: E501

        :return: The utid of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._utid

    @utid.setter
    def utid(self, utid):
        """Sets the utid of this ItemViewVerbose.

        Utid - Unique Tango Card ID.  # noqa: E501

        :param utid: The utid of this ItemViewVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and utid is None:
            raise ValueError("Invalid value for `utid`, must not be `None`")  # noqa: E501

        self._utid = utid

    @property
    def value_type(self):
        """Gets the value_type of this ItemViewVerbose.  # noqa: E501

        Value Type  # noqa: E501

        :return: The value_type of this ItemViewVerbose.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this ItemViewVerbose.

        Value Type  # noqa: E501

        :param value_type: The value_type of this ItemViewVerbose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value_type is None:
            raise ValueError("Invalid value for `value_type`, must not be `None`")  # noqa: E501

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemViewVerbose, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemViewVerbose):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemViewVerbose):
            return True

        return self.to_dict() != other.to_dict()

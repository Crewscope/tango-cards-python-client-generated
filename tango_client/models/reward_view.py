# coding: utf-8

"""
    Tango Card RaaS API

    <5. Ordersp>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us at <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>.  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tango_client.configuration import Configuration


class RewardView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential_list': 'list[CredentialView]',
        'credentials': 'dict(str, str)',
        'redemption_instructions': 'str'
    }

    attribute_map = {
        'credential_list': 'credentialList',
        'credentials': 'credentials',
        'redemption_instructions': 'redemptionInstructions'
    }

    def __init__(self, credential_list=None, credentials=None, redemption_instructions=None, _configuration=None):  # noqa: E501
        """RewardView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._credential_list = None
        self._credentials = None
        self._redemption_instructions = None
        self.discriminator = None

        if credential_list is not None:
            self.credential_list = credential_list
        self.credentials = credentials
        if redemption_instructions is not None:
            self.redemption_instructions = redemption_instructions

    @property
    def credential_list(self):
        """Gets the credential_list of this RewardView.  # noqa: E501

        Verbose list of credentials  # noqa: E501

        :return: The credential_list of this RewardView.  # noqa: E501
        :rtype: list[CredentialView]
        """
        return self._credential_list

    @credential_list.setter
    def credential_list(self, credential_list):
        """Sets the credential_list of this RewardView.

        Verbose list of credentials  # noqa: E501

        :param credential_list: The credential_list of this RewardView.  # noqa: E501
        :type: list[CredentialView]
        """

        self._credential_list = credential_list

    @property
    def credentials(self):
        """Gets the credentials of this RewardView.  # noqa: E501

        Credentials as a map with String label key and credential value String  # noqa: E501

        :return: The credentials of this RewardView.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this RewardView.

        Credentials as a map with String label key and credential value String  # noqa: E501

        :param credentials: The credentials of this RewardView.  # noqa: E501
        :type: dict(str, str)
        """
        if self._configuration.client_side_validation and credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    @property
    def redemption_instructions(self):
        """Gets the redemption_instructions of this RewardView.  # noqa: E501


        :return: The redemption_instructions of this RewardView.  # noqa: E501
        :rtype: str
        """
        return self._redemption_instructions

    @redemption_instructions.setter
    def redemption_instructions(self, redemption_instructions):
        """Sets the redemption_instructions of this RewardView.


        :param redemption_instructions: The redemption_instructions of this RewardView.  # noqa: E501
        :type: str
        """

        self._redemption_instructions = redemption_instructions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RewardView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RewardView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RewardView):
            return True

        return self.to_dict() != other.to_dict()
